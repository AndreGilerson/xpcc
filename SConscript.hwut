#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# 
# Copyright (c) 2011, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the Roboterclub Aachen e.V. nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------

import os
import sys
import string
from tempfile import mkstemp
from time import sleep

Import('env')

import telnetlib

import subprocess

import hwut.verifier.periodic_square_wave as psw

class Target(object):
	def __init__(self, address='localhost', port=4444):
		self.address = address
		self.tn = telnetlib.Telnet(address, port)
		self.TIMEOUT = 1.0

	def init(self):
		pass

	def halt(self):
		self.tn.write('halt\n')
		(result, mobj, str) = self.tn.expect(["(.*)\n>"], self.TIMEOUT)

	def resume(self):
		self.tn.write('resume\n')
		(result, mobj, str) = self.tn.expect(["(.*)\n>"], self.TIMEOUT)

	def reset(self):
		self.tn.write('reset run\n')
		(result, mobj, str) = self.tn.expect(["(.*)\n>"], self.TIMEOUT)

	def resetStopOnReset(self):
		self.tn.write('reset halt\n')
		(result, mobj, str) = self.tn.expect(["(.*)\n>"], self.TIMEOUT)


print('Welcome to HWUT')

tests = {
	'stm32l467disco1': {
		'path': 'hwut/stm32l467disco1', 
		'stimuli': None, 
		'output': 'disco1.output' 
		},
	'stm32l467disco2': {
		'path': 'hwut/stm32l467disco1', 
		'stimuli': 'mystimuli', 
		'output': 'disco2.output' 
		}	
}

hwut = 'all' if 'hwut' in BUILD_TARGETS else ARGUMENTS.get('hwut')

# Check that all examples compile without errors. The correct function of the
# examples is not checked!

if tests.has_key(hwut):
	test = tests[hwut]

	result = []
	everythingOk = True

	if str(Platform()) != "win32":
		color_red = "\033[0;31m"
		color_green = "\033[0;32m"
		color_yellow = "\033[0;33m"
		color_default = "\033[0m"
	else:
		color_red = ""
		color_green = ""
		color_yellow = ""
		color_default = ""

	for path, directories, files in os.walk(test['path']):
		if 'SConstruct' in files:

			# Build and program with scons
			action = [] # ['build', 'program']
			for act in action:
				if not everythingOk:
					continue

				exitStatus = os.system("scons -Q -C %s %s" % (path, act))
				if exitStatus == 0:
					result.append("%s: %s -> Ok" % (path, act))
				else:
					result.append(color_red + ("%s: %s -> FAIL!" % (path, act)) + color_default)
					everythingOk = False

			# 
			t = Target()
			t.resetStopOnReset()

			fd, sroutfile = mkstemp()
			os.close(fd)

			p = subprocess.Popen([
				'/usr/local/bin/sigrok-cli', 
					'-d', 'fx2lafw', 
					'--config', 'samplerate=100000', 
					'--samples', '200000',
					'--channels', 'D0=PB2,D1=SDA',
					'--triggers', 'PB2=f',
					'--wait-trigger',
					'--output-file', sroutfile
				])

			# Wait for sigrok to settle and arm trigger
			print('About to start ...')
			sleep(0.5)

			# Start target
			t.resume()

			# Wait for normal termination or kill sigrok
			timeout = 10
			while timeout != 0:
				if p.poll() is not None:
					break
				print('timeout = %d' % timeout)
				timeout -= 1
				sleep(1)

			if timeout == 0:
				p.kill()
				print('Termination by timeout')
			else:
				print('Normal termination')

			# Decode trace
			fd, srdecodefile = mkstemp()
			p = subprocess.Popen([
				'/usr/local/bin/sigrok-cli',
				'--input-file', sroutfile,
				'--output-file', srdecodefile,
				'--protocol-decoders', 'timing'
				], stdout=fd) # subprocess.PIPE)
			p.wait()

			# Verify trace
			with open(srdecodefile) as fp:
				trace = fp.readlines()

			v = psw.PeriodicSquareWave(high=0.4, low=0.1)
			everythingOk &= v.verify(trace)

			for l in v.getReport():
				print l

			os.unlink(sroutfile)
			os.unlink(srdecodefile)

	print "\nRESULTS:\n"
	print '\n'.join(result)
	if everythingOk:
		print "\nOK!"
		Exit(0)
	else:
		print "\nFAIL!"
		Exit(1)

print "\nFAIL!"
Exit(1)
