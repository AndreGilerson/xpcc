// WARNING: This file is generated automatically, do not edit!
// Please modify the corresponding 'runner_stm32.cpp.in' file instead.
// ----------------------------------------------------------------------------

#include <xpcc/architecture/platform.hpp>
#include <xpcc/debug/logger.hpp>

#include <unittest/reporter.hpp>
#include <unittest/controller.hpp>

${includes}

${names}

using namespace xpcc::stm32;

#ifdef XPCC_BOARD_HAS_LOGGER
// Reuse logger from board
extern Board::LoggerDevice loggerDevice;
#else
// Create an IODeviceWrapper around the Uart Peripheral we want to use
// This requires additonal hardware.
using LoggerDevice = xpcc::IODeviceWrapper< Usart2, xpcc::IOBuffer::BlockIfFull >;
LoggerDevice loggerDevice;

// Set all four logger streams to use the UART
xpcc::log::Logger xpcc::log::debug(loggerDevice);
xpcc::log::Logger xpcc::log::info(loggerDevice);
xpcc::log::Logger xpcc::log::warning(loggerDevice);
xpcc::log::Logger xpcc::log::error(loggerDevice);
#endif

int
main()
{
	Board::initialize();

#ifndef XPCC_BOARD_HAS_LOGGER
	// initialize output device, enable USART 2
	GpioOutputA2::connect(Usart2::Tx);
	GpioInputA3::connect(Usart2::Rx, Gpio::InputType::PullUp);
	Usart2::initialize<Board::systemClock, 115200>(12);
#endif

	loggerDevice.write("Unittests (" __DATE__ ", " __TIME__")\n");

	unittest::Reporter reporter(loggerDevice);
	unittest::Controller::instance().setReporter(reporter);

	// run tests
${tests}

	unittest::Controller::instance().getReporter().printSummary();

	while (true)
	{
	}
}
