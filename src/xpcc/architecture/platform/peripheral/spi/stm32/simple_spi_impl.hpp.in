// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_SIMPLE_SPI{{ id }}_HPP
#	error	"Don't include this file directly, use 'simple_spi.hpp' instead!"
#endif

// ----------------------------------------------------------------------------
template< class clockSource, uint32_t baudrate, uint16_t tolerance >
void ALWAYS_INLINE
xpcc::stm32::SpiSimpleMaster{{ id }}::initialize()
{
	// calculate the nearest prescaler from the baudrate
	constexpr float pre_raw = (static_cast<float>(clockSource::Spi{{ id }}) / baudrate);
	constexpr uint16_t pre = (
			(pre_raw >= (128 * 4.f/3)) ? 256 : (
			(pre_raw >= ( 64 * 4.f/3)) ? 128 : (
			(pre_raw >= ( 32 * 4.f/3)) ?  64 : (
			(pre_raw >= ( 16 * 4.f/3)) ?  32 : (
			(pre_raw >= (  8 * 4.f/3)) ?  16 : (
			(pre_raw >= (  4 * 4.f/3)) ?   8 : (
			(pre_raw >= (  2 * 4.f/3)) ?   4 :
										   2
			)))))));

	// check if we found a prescaler which generates a baudrate within the tolerance
	assertBaudrateInTolerance<
			/* nearest possible value */ clockSource::Spi{{ id }} / pre,
			/* desired = */ baudrate,
			tolerance >();

	// translate the prescaler into the bitmapping
	constexpr SpiHal{{ id }}::Prescaler prescaler = (
			(pre >= 256) ? SpiHal{{ id }}::Prescaler::Div256 : (
			(pre >= 128) ? SpiHal{{ id }}::Prescaler::Div128 : (
			(pre >=  64) ? SpiHal{{ id }}::Prescaler::Div64  : (
			(pre >=  32) ? SpiHal{{ id }}::Prescaler::Div32  : (
			(pre >=  16) ? SpiHal{{ id }}::Prescaler::Div16  : (
			(pre >=   8) ? SpiHal{{ id }}::Prescaler::Div8   : (
			(pre >=   4) ? SpiHal{{ id }}::Prescaler::Div4   :
						   SpiHal{{ id }}::Prescaler::Div2
			)))))));

	// initialize the Spi
	SpiHal{{ id }}::initialize(prescaler);
}

void ALWAYS_INLINE
xpcc::stm32::SpiSimpleMaster{{ id }}::setDataMode(DataMode mode)
{
	SpiHal{{ id }}::setDataMode(static_cast<SpiHal{{ id }}::DataMode>(mode));
}

void ALWAYS_INLINE
xpcc::stm32::SpiSimpleMaster{{ id }}::setDataOrder(DataOrder order)
{
	SpiHal{{ id }}::setDataOrder(static_cast<SpiHal{{ id }}::DataOrder>(order));
}

// MARK: data transfers
uint8_t ALWAYS_INLINE
xpcc::stm32::SpiSimpleMaster{{ id }}::writeReadBlocking(uint8_t data)
{
	while(!SpiHal{{ id }}::isTransmitRegisterEmpty())
		;
	SpiHal{{ id }}::write(data);

	while(!SpiHal{{ id }}::isReceiveRegisterNotEmpty())
		;
	SpiHal{{ id }}::read(data);

	return data;
}

void inline
xpcc::stm32::SpiSimpleMaster{{ id }}::transferBlocking(
		uint8_t * tx, uint8_t * rx, std::size_t length)
{
	uint_fast8_t tx_byte = 0xff;
	uint_fast8_t rx_byte;

	for (std::size_t i = 0; i < length; i++)
	{
		if (tx) tx_byte = tx[i];

		rx_byte = writeReadBlocking(tx_byte);

		if (rx) rx[i] = rx_byte;
	}
}
