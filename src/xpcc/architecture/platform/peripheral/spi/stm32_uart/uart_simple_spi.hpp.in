// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP
#define XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP

#include <xpcc/architecture/peripheral/spi.hpp>
#include "../../uart/stm32/usart_hal_{{ id }}.hpp"
#include "type_ids.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * Serial Peripheral Interface of the Uart module.
 *
 * @warnind	Be aware, that the uart module can send bytes only LSB first.
 *			Therefore the data is bit reversed in software for DataOrder::MsbFirst.
 *
 * @author		Niklas Hauser
 * @ingroup		stm32
 */
class UartSpiSimpleMaster{{ id }} : public xpcc::SpiSimpleMaster, public UartBase
{
private:
	static DataOrder dataOrder;
public:
	static const TypeId::UartSpiMaster{{ id }}Sck  Sck;
	static const TypeId::UartSpiMaster{{ id }}Miso Miso;
	static const TypeId::UartSpiMaster{{ id }}Mosi Mosi;

public:
	enum class
	DataMode : uint32_t
	{
		Mode0 = 0b00,			///< clock normal,   sample on rising  edge
		Mode1 = USART_CR2_CPHA,	///< clock normal,   sample on falling edge
		Mode2 = USART_CR2_CPOL,	///< clock inverted, sample on falling  edge
		Mode3 = USART_CR2_CPOL | USART_CR2_CPHA
		///< clock inverted, sample on rising edge
	};

public:
	template< 	class clockSource, uint32_t baudrate,
				uint16_t tolerance = xpcc::Tolerance::FivePercent >
	static void
	initialize();

	static void
	setDataMode(DataMode mode);

	/// @warning 	On this target, only `DataOrder::LsbFirst` is natively
	///				supported!
	///				`DataOrder::MsbFirst` is reimplemented in software using
	///				xpcc::bitReverse(), which adds some overhead.
	/// @see	xpcc::bitReverse()
	static void
	setDataOrder(DataOrder order);

	static uint8_t
	writeReadBlocking(uint8_t data);

	static void
	transferBlocking(uint8_t * tx, uint8_t * rx, std::size_t length);
};

} // namespace stm32

} // namespace xpcc

#include "uart_simple_spi_{{id}}_impl.hpp"

#endif // XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP
