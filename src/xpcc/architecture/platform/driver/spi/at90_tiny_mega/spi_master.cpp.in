// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include "spi_master.hpp"

// bit 7 (0x80) is used for transfer 1 byte
// bit 6 (0x40) is used for transfer multiple byte
// bit 5-0 (0x3f) are used to store the aquire count
uint8_t
xpcc::{{target.family}}::SpiMaster::state(0);

void *
xpcc::{{target.family}}::SpiMaster::context(nullptr);
// ----------------------------------------------------------------------------

void
xpcc::{{target.family}}::SpiMaster::initialize(Prescaler prescaler)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (static_cast<uint8_t>(prescaler) & ~0x80);
	SPSR = (static_cast<uint8_t>(prescaler) & 0x80) ? (1 << SPI2X) : 0;
	state &= 0x3f;
}
// ----------------------------------------------------------------------------

uint8_t
xpcc::{{target.family}}::SpiMaster::aquire(void *ctx)
{
	if (context == nullptr)
	{
		context = ctx;
		state = (state & ~0x3f) | 1;
		return 1;
	}

	if (ctx == context)
		return (++state & 0x3f);

	return 0;
}

uint8_t
xpcc::{{target.family}}::SpiMaster::release(void *ctx)
{
	if (ctx == context)
	{
		if ((--state & 0x3f) == 0)
			context = nullptr;
	}
	return (state & 0x3f);
}
// ----------------------------------------------------------------------------

xpcc::co::Result<uint8_t>
xpcc::{{target.family}}::SpiMaster::transfer(uint8_t data)
{
	// this is a manually implemented "fast coroutine"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (LSB of state):
	//   1. waiting to start, and
	//   2. waiting to finish.

	// always wait for any transfers to finish
	if (!(SPSR & (1 << SPIF)))
		return {xpcc::co::Running, 0};

	// LSB == 0 ?
	if ( !(state & 0x80) )
	{
		// start transfer by copying data into register
		SPDR = data;

		// set LSB = 1
		state |= 0x80;
		return {xpcc::co::Running, 0};
		// this then waits above for transfer to finish
	}

	// transfer finished
	state &= ~0x80;
	data = SPDR;
	return {xpcc::co::Stop, data};
}

xpcc::co::Result<void>
xpcc::{{target.family}}::SpiMaster::transfer(
		uint8_t *tx, uint8_t *rx, std::size_t length)
{
	// this is a manually implemented "fast coroutine"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (0x02 of state):
	//   1. initialize index, and
	//   2. wait for 1-byte transfer to finish.

	// we need to globally remember which byte we are currently transferring
	static std::size_t index = 0;

	// we need to allocate this on the stack
	uint8_t tx_byte = 0xff;

	// we are only interested in 0x02
	switch(state & 0x40)
	{
		case 0:
			// we will only visit this state once
			state |= 0x40;

			// initialize index and check range
			index = 0;
			while (index < length)
			{

		default:
				// if tx == 0, we use a dummy byte 0xff
				if (tx) tx_byte = tx[index];
		{
				// call the coroutine
				xpcc::co::Result<uint8_t> result = transfer(tx_byte);

				// if the coroutine is still running, so are we
				if (result.state > xpcc::co::NestingError)
					return {xpcc::co::Running, 0};

				// if rx != 0, we copy the result into the array
				if (rx) rx[index] = result.result;
		}
				index++;
			}

			// clear the state
			state &= 0x01;
			return {xpcc::co::Stop, 0};
	}
}
